cmdhistory=["(use 'ring.adapter.jetty)" "(use 'vote.core)" "(run-jetty handler {\:port 3000})" "(use 'clog.templates \:reload)" "lein ring server" "(+ 1 1 1)" "(def m {\:name \\"Anonymous" "\:lastname \\"Candidate\\"})" "(+ 1 1 1)" "(+2 3)" "(+ 2 3)" "(\:use ring.adapter.jetty)" "(ns vote.core)" "(\:use ring.adapter.jetty)" "(+ 1 1)" "(run-jetty handler {\:port 3000})" "(ns vote.core(\:use ring.adapter.jetty))" "(defn my-handler [request]\\n  (println \\"Processing request\\")\\n  request)" "(run-jetty \#'my-handler\\n           {\:port 8090 \:join? false})" "(+1 1 1)" "(ns vote.core)" "(+ 1 1)" "(defn new-handler [request]\\n  {\:status 200\\n   \:headers {\\"Content-Type\\" \\"text/plain\\"}\\n   \:body \\"Halleluah\\"})" "(run-jetty new-handler {\:port 3000})" "(run-jetty \#'my-handler\\r\\n              {\:port 8090 \:join? false})" "(ns vote.core)" "(+ 1 1 1)" "(+ 1 1)" "(ns vote. core)" "(ns vote.core)" "(ns vote.core (\:use ring.adapter.jetty))" "(defn my-handler [request]\\n  (let [uri (\:uri request)]\\n    {\:body uri}))" "(doc run-jetty)" "(defn my-handler [request]\\n  (println \\">>> Processing request\\")\\n  {\:status 200\\n   \:body  \\"<h2>Hello, world</h2>\\"})" "(defn my-handler [request]\\r\\n     (println \\">>> Processing request\\")\\r\\n     {\:status 200\\r\\n      \:headers {\\"Content-Type\\" \\"text/plain\\"}\\r\\n      \:body \\"<h1>Testing</h1>\\"})" "(defn my-handler [request]\\r\\n        (println \\">>> Processing request\\")\\r\\n        {\:status 200\\r\\n         \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n         \:body \\"<h1>Testing</h1>\\"})" "(defn my-handler [request]\\r\\n           (println \\">>> Processing request\\")\\r\\n           {\:status 200\\r\\n            \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n            \:body \\"<h1>Testing</h1>\\"\\n            \\"<br />\\"\\n            \\"<p>Test</p>\\"})" "(defn my-handler [request]\\r\\n              (println \\">>> Processing request\\")\\r\\n              {\:status 200\\r\\n               \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n               \:body \\"<h1>Testing</h1>\\"\\r\\n               \:body \\"<br />\\"\\r\\n               \:body \\"<p>Test</p>\\"})" "(defn my-handler [request]\\r\\n                 (println \\">>> Processing request\\")\\r\\n                 {\:status 200\\r\\n                  \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                  \:body (str \\"<h1>Testing</h1>\\")\\r\\n                  (str \\"<br />\\")\\r\\n                  (str \\"<p>Test</p>\\")})" "(defn my-handler [request]\\r\\n                    (println \\">>> Processing request\\")\\r\\n                    {\:status 200\\r\\n                     \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                     \:body (str \\"<h1>Testing</h1>\\" \\n                                \\"<br />\\"\\r\\n                                \\"<p>Test</p>\\")})" "(ns vote.core)" "(use 'hiccup.core)" "(defn my-handler [request]\\r\\n     (println \\">>> Processing request\\")\\r\\n     {\:status 200\\n      \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n      })" "(defn my-handler [request]\\r\\n     (println \\">>> Processing request\\")\\r\\n     {\:status 200\\r\\n      \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n      })" "(use 'hiccup.core)" "(html [\:span {\:class \\"foo\\"} \\"bar\\"])" "(defn my-handler [request]\\r\\n     (println \\">>> Processing request\\")\\r\\n     {\:status 200\\r\\n      \:headers {\\"Content-Type\\" \\"text/html\\"}\\n      \:body (html [\:span {\:class \\"foo\\"} \\"bar\\"])\\r\\n      })" "(defn my-handler [request]\\r\\n        (println \\">>> Processing request\\")\\r\\n        {\:status 200\\r\\n         \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n         (html [\:span {\:class \\"foo\\"} \\"bar\\"])\\r\\n         })" "(defn my-handler [request]\\r\\n           (println \\">>> Processing request\\")\\r\\n           {\:status 200\\r\\n            \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n            \:body \\"(html [\:span {\:class \\"foo\\"} \\"bar\\"])\\"\\r\\n            })" "(defn my-handler [request]\\r\\n              (println \\">>> Processing request\\")\\r\\n              {\:status 200\\r\\n               \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n               \:body [\:span {\:class \\"foo\\"} \\"bar\\"]\\r\\n               })" "(defn my-handler [request]\\r\\n  {\:status 200\\r\\n   \:headers {\\"Content-Type\\" \\"text/plain;\=us-ascii\\"}\\r\\n   \:body (str request)})" "(ns vote.core)" "(defn my-handler [request]\\n  (println \\">>> Processing request\\")\\r\\n     {\:status 200\\r\\n      \:headers {\\"Content-Type\\" \\"text/plain\\"}\\r\\n      \:body (str request)})" "(defn my-handler [request]\\r\\n        (println \\">>> Processing request\\")\\r\\n        {\:status 200\\r\\n         \:headers {\\"Content-Type\\" \\"text/html\\"}\\n         \:body \\"<h1>hello</h1>\\"\\r\\n         })" "(defn my-handler [request]\\r\\n           {\:status 200\\r\\n            \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n            \:body \\"<h1>hello</h1>\\"\\r\\n            })" "(defn my-handler [request]\\r\\n(println \\">>> Processing request\\")\\r\\n              {\:status 200\\r\\n               \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n               \:body \\"<h1>hello</h1>\\"\\r\\n               })" "(defn my-handler [request]\\r\\n(println \\">>> Processing request\\")\\r\\n              request)" "(run-jetty my-handler {\:port 3000 \:join? false})" "(defn my-handler [request]\\r\\n     (println \\">>> Processing request\\")\\r\\n     {\:status 200\\r\\n      \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n      \:body (html [\:span {\:class \\"foo\\"} \\"bar\\"])\\r\\n      })" "(use hiccup.core)" "(ns vote.core)" "(use hiccup.core)" "(use 'hiccup.core)" "(defn my-handler [request]\\r\\n     (println \\">>> Processing request\\")\\r\\n     {\:status 200\\r\\n      \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n      \:body (html [\:span {\:class \\"foo\\"} \\"bar\\"])\\r\\n      })" "(defn my-handler [request]\\r\\n        (println \\">>> Processing request\\")\\r\\n        {\:status 200\\r\\n         \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n         \:body Why not?\\r\\n         })" "(defn my-handler [request]\\r\\n           (println \\">>> Processing request\\")\\r\\n           {\:status 200\\r\\n            \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n            \:body \\"Why not?\\"\\r\\n            })" "(defn my-handler [request]\\r\\n              (println \\">>> Processing request\\")\\r\\n              {\:status 200\\r\\n               \:headers {\\"Content-Type\\" \\"text/plain\\"}\\r\\n               \:body \\"Why not?\\"\\r\\n               })" "(defn my-handler [request]\\r\\n                 {\:status 200\\r\\n                  \:headers {\\"Content-Type\\" \\"text/plain\\"}\\r\\n                  \:body \\"Why not?\\"\\r\\n                  })" "(+ 1 1)" "\\r\\n(defn my-handler [request]\\r\\n                    {\:status 200\\r\\n                     \:headers {\\"Content-Type\\" \\"text/plain\\"}\\r\\n                     \:body \\"Why not?\\"\\r\\n                     })" "(defn my-handler [request]\\r\\n                       {\:status 200\\r\\n                        \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                        \:body \\"<h1>Clojure Web Services</h1>\\"\\r\\n                        })" "(ns vote.core)" "(use hiccup.core)" "(use 'hiccup.core)" "(defn my-handler [request]\\r\\n                          {\:status 200\\r\\n                           \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                           \:body \\"<h1>Clojure Web Services Yo\!</h1>\\"\\r\\n                           })" "(defn my-handler [request]\\r\\n                          {\:status 200\\r\\n                           \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                           \:body \\"<h1>Clojure Web Services Yo\!</h1>\\"\\n                           [\:a {\:href \\"http\://github.com\\"} \\"GitHub\\"]\\r\\n                           }" "(defn my-handler [request]\\r\\n                             {\:status 200\\r\\n                              \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                              \:body page}\\n                                (defn page []\\n                                  [\:a {\:href \\"http\://github.com\\"} \\"GitHub\\"]))" "(defn my-handler [request]\\r\\n                                {\:status 200\\r\\n                                 \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                                 \:body page (defn page []\\r\\n                                     [\:a {\:href \\"http\://github.com\\"} \\"GitHub\\"])}\\r\\n                                   )" "(defn page []\\r\\n                                     [\:a {\:href \\"http\://github.com\\"} \\"GitHub\\"])\\n\\n(defn my-handler [request]\\r\\n                                {\:status 200\\r\\n                                 \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                                 \:body page}\\r\\n                                   )" "(defn my-handler [request]\\r\\n                             {\:status 200\\r\\n                              \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                              \:body \\"<h1>Clojure Web Services Yo\!</h1>\\"\\r\\n                              })" "(println [\:p \\"Hello \\" [\:em \\"World\!\\"]])" "[\:p \\"Hello \\" [\:em \\"World\!\\"]]" "(ns vote.core)" "[\:p \\"Hello \\" [\:em \\"World\!\\"]]" "(use 'hiccup.core)" "[\:p \\"Hello \\" [\:em \\"World\!\\"]]" "(\:use hiccup.core)" "(\:use 'hiccup.core)" "[\:p \\"Hello \\" [\:em \\"World\!\\"]]" "(ns vote.core (\:use 'hiccup.core))" "(\:require [compojure.route \:as route])" "(\:use ring.adapter.jetty)" "(ns vote.core\\r\\n  (\:use ring.adapter.jetty)\\r\\n  (\:require [compojure.route \:as route]))" "(ns vote.core\\r\\n     (\:use ring.adapter.jetty)\\r\\n     (\:require [compojure.compojure.route \:as route]))" "(ns vote.core\\r\\n        (\:use ring.adapter.jetty)\\r\\n        (\:require [compojure.route \:as route]))" "(run-jetty my_routes {\:port 3000})" "(defn my-handler [request]\\r\\n(println \\">>> Processing request\\")\\r\\n              {\:status 200\\r\\n               \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n               \:body \\"<h1>hello</h1>\\"\\r\\n               })" "(run-jetty my_handler {\:port 3000})" "(defn my-handler [request]\\r\\n(println \\">>> Processing request\\")\\r\\n              {\:status 200\\r\\n               \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n               \:body \\"<h1>hello</h1>\\"\\r\\n               })" "(run-jetty my-handler {\:port 3000 \:join? false})" "(defn foo [x] (str \\"Hello, \\" x))\\r\\n\\r\\n(defroutes my_routes\\r\\n  (GET \\"/\\" [] (foo \\"Anonymous\\"))\\r\\n  (route/resources \\"/\\"))" "(run-jetty my-routes {\:port 3000})" "(run-jetty my_routes {\:port 3000})" "(run-jetty my_routes {\:port 4000})" "(defroutes my_routes\\r\\n  (GET \\"/\\" [] (view/index-page) )\\r\\n  (route/resources \\"/\\"))\\r\\n\\r\\n(run-jetty my_routes {\:port 3000})" "(defn index-page []\\r\\n  (html5\\r\\n    [\:html\\r\\n     [\:head]\\r\\n     [\:body \\"blahhhhh\\"]]))" "(ns vote.view)" "(ns vote.core)" "(ns vote.view)" "(+ 1 1)" "(ns vote.core)" "why" "clojure.core/gen-interface" "re-groups" "fn" "cider.nrepl.middleware.debug" "(run-jetty \#'my_routes {\:port 3000})" "(+ 1 1)" "(run-jetty \#'my_routes {\:port 3000})" "(defroutes my_routes\\r\\n  (GET \\"/\\" [] (view/indfsefex-page) )\\r\\n  (route/resources \\"/\\"))" "(+ 1 1)" "(+1 1)" "(ns vote.core)" "(+ 1 1)" "(defn my-handler [request]\\r\\n\\t(println \\">>> Processing request\\")\\r\\n              {\:status 200\\r\\n               \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n               \:body\\r\\n  (html5\\r\\n    [\:html\\r\\n     [\:head\\r\\n      [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n        (include-css \\"/css/style.css\\")]\\r\\n     [\:body \\r\\n      [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n      [\:img {\:src \\"/resources/images/gma.gif\\"}]]]))\\r\\n               })" "(defn my-handler [request]\\r\\n   \\t(println \\">>> Processing request\\")\\r\\n                 {\:status 200\\r\\n                  \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                  \:body\\r\\n     (html5\\r\\n       [\:html\\r\\n        [\:head\\r\\n         [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n           (include-css \\"/css/style.css\\")]\\r\\n        [\:body \\r\\n         [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n         [\:img {\:src \\"/resources/images/gma.gif\\"}]]])\\r\\n                  })" "(run-jetty my-handler {\:port 3000 \:join? false})" "(+ 1 1)" "(run-jetty example-handler {\:port 3000})" "(+ 1 1)" "(run-jetty my-handler {\:port 3000 \:join? false})" "(defn example-handler [request]\\r\\n\\t(println \\">>> Processing request\\")\\r\\n              {\:status 200\\r\\n               \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n               \:body \\"<h1>hello</h1>\\"\\r\\n               })" "(run-jetty my-handler {\:port 3000 \:join? false})" "(run-jetty example-handler {\:port 3000 \:join? false})" "(defn example-handler [request]\\r\\n   \\t(println \\">>> Processing request\\")\\r\\n                 {\:status 200\\r\\n                  \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                  \:body \\"<h1>hello\!</h1>\\"\\r\\n                  })" "(run-jetty example-handler {\:port 3000 \:join? false})" "(run-jetty '\#example-handler {\:port 3000 \:join? false})" "(run-jetty \#'example-handler {\:port 3000 \:join? false})" "(run-jetty '\#example-handler {\:port 4000 \:join? false})" "(run-jetty \#'example-handler {\:port 4000 \:join? false})" "(ns vote.core\\r\\n  (\:use hiccup.page hiccup.element))" "(defn example-handler [request]\\r\\n      \\t(println \\">>> Processing request\\")\\r\\n                    {\:status 200\\r\\n                     \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                     \:body [\:h1 \\"Test\\"]\\r\\n                     })\\r\\n\\r\\n(run-jetty \#'example-handler {\:port 5000 \:join? false})" "(defn index-page []\\r\\n  (html5\\r\\n    [\:html\\r\\n     [\:head\\r\\n      [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n        (include-css \\"/vote/src/css/style.css\\")]\\r\\n     [\:body\\r\\n      [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n      [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n      [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n      ]]))" "(defn example-handler [request]\\r\\n         \\t(println \\">>> Processing request\\")\\r\\n                       {\:status 200\\r\\n                        \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                        \:body index-page\\r\\n                        })\\r\\n   \\r\\n   (run-jetty \#'example-handler {\:port 5000 \:join? false})" "(run-jetty \#'example-handler {\:port 6000 \:join? false})" "(defn index-page []\\r\\n     (html5\\r\\n       [\:html\\r\\n        [\:head\\r\\n         [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n           (include-css \\"/vote/src/css/style.css\\")]\\r\\n        [\:body\\r\\n         [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n         [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n         [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n         ]]))" "(defn example-handler [request]\\r\\n            \\t(println \\">>> Processing request\\")\\r\\n                          {\:status 200\\r\\n                           \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                           \:body index-page\\r\\n                           })" "(run-jetty \#'example-handler {\:port 1000 \:join? false})" "[\:h1 \\"test\\"]" "(\:use hiccup.page hiccup.element)" "(ns vote.core\\r\\n  (\:use hiccup.page hiccup.element))" "(ns vote.core)" "[\:h1 \\"test\\"]" "(defn example-handler [request]\\r\\n      \\t(println \\">>> Processing request\\")\\r\\n       (defroutes app\\r\\n  \\t\\t(GET \\"/\\" [] (core/index-page))\\r\\n  \\t\\t(route/not-found \\"Page not found.\\")\\r\\n  \\t\\t(route/resources \\"/\\"))\\r\\n                    {\:status 200\\r\\n                     \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                     \:body \\"<h1>hello\!</h1>\\"\\r\\n                     })\\r\\n\\r\\n(run-jetty \#'example-handler {\:port 1000 \:join? false})" "(defn example-handler [request]\\r\\n      \\t(println \\">>> Processing request\\")\\r\\n                    {\:status 200\\r\\n                     \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                     \:body \\"<h1>hello\!</h1>\\"\\r\\n                     })\\r\\n\\r\\n(defn example-handler [request]\\r\\n      \\t(println \\">>> Processing request\\")\\r\\n\\t(defroutes app\\r\\n  \\t\\t(GET \\"/\\" [] (core/index-page))\\r\\n  \\t\\t(route/not-found \\"Page not found.\\")\\r\\n  \\t\\t(route/resources \\"/\\"))\\r\\n                    {\:status 200\\r\\n                     \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                     \:body \\"<h1>hello\!</h1>\\"\\r\\n                     })\\r\\n\\r\\n(run-jetty \#'example-handler {\:port 1000 \:join? false})" "(defn index-page []\\r\\n  (html5\\r\\n    [\:html\\r\\n     [\:head\\r\\n      [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n        (include-css \\"/vote/src/css/style.css\\")]\\r\\n     [\:body\\r\\n      [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n      [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n      [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n      ]]))\\r\\n\\r\\n(defn example-handler [request]\\r\\n      \\t(println \\">>> Processing request\\")\\r\\n\\t(defroutes app\\r\\n  \\t\\t(GET \\"/\\" [] (core/index-page))\\r\\n  \\t\\t(route/not-found \\"Page not found.\\")\\r\\n  \\t\\t(route/resources \\"/\\"))\\r\\n                    {\:status 200\\r\\n                     \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                     \:body \\"<h1>hello\!</h1>\\"\\r\\n                     })\\r\\n\\r\\n(run-jetty \#'example-handler {\:port 2000 \:join? false})" "(defn index-page []\\r\\n     (html5\\r\\n       [\:html\\r\\n        [\:head\\r\\n         [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n           (include-css \\"/vote/src/css/style.css\\")]\\r\\n        [\:body\\r\\n         [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n         [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n         [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n         ]]))\\r\\n   \\r\\n   (defn example-handler [request]\\r\\n         \\t(println \\">>> Processing request\\")\\r\\n   \\t(defroutes app\\r\\n     \\t\\t(GET \\"/\\" [] (core/index-page))\\r\\n     \\t\\t(route/not-found \\"Page not found.\\")\\r\\n     \\t\\t(route/resources \\"/\\"))\\r\\n                       {\:status 200\\r\\n                        \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                        \:body (core/index-page)\\r\\n                        })\\r\\n   \\r\\n   (run-jetty \#'example-handler {\:port 3000 \:join? false})" "(defn about-page []\\r\\n\\t([\:p \u201Cabout this stuff\u201D]))\\r\\n\\r\\n(defn index-page []\\r\\n        (html5\\r\\n          [\:html\\r\\n           [\:head\\r\\n            [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n              (include-css \\"/vote/src/css/style.css\\")]\\r\\n           [\:body\\r\\n            [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n            [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n            [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n\\t\\t(core/about-page)\\r\\n            ]]))\\r\\n      \\r\\n      (defn example-handler [request]\\r\\n            \\t(println \\">>> Processing request\\")\\r\\n      \\t(defroutes app\\r\\n        \\t\\t(GET \\"/\\" [] (core/index-page))\\r\\n        \\t\\t(route/not-found \\"Page not found.\\")\\r\\n        \\t\\t(route/resources \\"/\\"))\\r\\n                          {\:status 200\\r\\n                           \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                           \:body (core/index-page)\\r\\n                           })\\r\\n      \\r\\n      (run-jetty \#'example-handler {\:port 4000 \:join? false})" "(defn about-page []\\r\\n   \\t([\:p \u201Cabout this stuff\u201D]))\\r\\n   \\r\\n   (defn index-page []\\r\\n           (html5\\r\\n             [\:html\\r\\n              [\:head\\r\\n               [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n                 (include-css \\"/vote/src/css/style.css\\")]\\r\\n              [\:body\\r\\n               [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n               [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n               [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n   \\t\\t(core/about-page)\\r\\n               ]]))\\r\\n         \\r\\n         (defn example-handler [request]\\r\\n               \\t(println \\">>> Processing request\\")\\r\\n         \\t(defroutes app\\r\\n           \\t\\t(GET \\"/\\" [] (core/index-page))\\n             (GET \\"/about\\" [] (core/about-page))\\r\\n           \\t\\t(route/not-found \\"Page not found.\\")\\r\\n           \\t\\t(route/resources \\"/\\"))\\r\\n                             {\:status 200\\r\\n                              \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                              \:body (core/index-page)\\r\\n                              })\\r\\n         \\r\\n         (run-jetty \#'example-handler {\:port 5000 \:join? false})" "(defn about-page []\\r\\n      \\t[\:p \u201Cabout this stuff\u201D])\\r\\n      \\r\\n      (defn index-page []\\r\\n              (html5\\r\\n                [\:html\\r\\n                 [\:head\\r\\n                  [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n                    (include-css \\"/vote/src/css/style.css\\")]\\r\\n                 [\:body\\r\\n                  [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n                  [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n                  [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n      \\t\\t(core/about-page)\\r\\n                  ]]))\\r\\n            \\r\\n            (defn example-handler [request]\\r\\n                  \\t(println \\">>> Processing request\\")\\r\\n            \\t(defroutes app\\r\\n              \\t\\t(GET \\"/\\" [] (core/index-page))\\r\\n                (GET \\"/about\\" [] (core/about-page))\\r\\n              \\t\\t(route/not-found \\"Page not found.\\")\\r\\n              \\t\\t(route/resources \\"/\\"))\\r\\n                                {\:status 200\\r\\n                                 \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                                 \:body (core/index-page)\\r\\n                                 })\\r\\n            \\r\\n            (run-jetty \#'example-handler {\:port 6000 \:join? false})" "(defn about-page []\\r\\n      \\t(html5 \\r\\n[\:p \u201Cabout this stuff\u201D]\\r\\n))\\r\\n      \\r\\n      (defn index-page []\\r\\n              (html5\\r\\n                [\:html\\r\\n                 [\:head\\r\\n                  [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n                    (include-css \\"/vote/src/css/style.css\\")]\\r\\n                 [\:body\\r\\n                  [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n                  [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n                  [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n      \\t\\t(core/about-page)\\r\\n                  ]]))\\r\\n            \\r\\n            (defn example-handler [request]\\r\\n                  \\t(println \\">>> Processing request\\")\\r\\n            \\t(defroutes app\\r\\n              \\t\\t(GET \\"/\\" [] (core/index-page))\\r\\n                (GET \\"/about\\" [] (core/about-page))\\r\\n              \\t\\t(route/not-found \\"Page not found.\\")\\r\\n              \\t\\t(route/resources \\"/\\"))\\r\\n                                {\:status 200\\r\\n                                 \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                                 \:body (core/index-page)\\r\\n                                 })\\r\\n            \\r\\n            (run-jetty \#'example-handler {\:port 7000 \:join? false})" "(defn about-page [] \\r\\n[\:p \u201Cabout this stuff\u201D])\\r\\n      \\r\\n      (defn index-page []\\r\\n              (html5\\r\\n                [\:html\\r\\n                 [\:head\\r\\n                  [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n                    (include-css \\"/vote/src/css/style.css\\")]\\r\\n                 [\:body\\r\\n                  [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n                  [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n                  [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n                  ]]))\\r\\n            \\r\\n            (defn example-handler [request]\\r\\n                  \\t(println \\">>> Processing request\\")\\r\\n            \\t(defroutes app\\r\\n              \\t\\t(GET \\"/\\" [] (core/about-page))\\r\\n              \\t\\t(route/not-found \\"Page not found.\\")\\r\\n              \\t\\t(route/resources \\"/\\"))\\r\\n                                {\:status 200\\r\\n                                 \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                                 \:body (core/index-page)\\r\\n                                 })\\r\\n            \\r\\n            (run-jetty \#'example-handler {\:port 8000 \:join? false})" "(defn about-page [] \\r\\n[\:p \u201Cabout this stuff\u201D])\\r\\n      \\r\\n      (defn index-page []\\r\\n              (html5\\r\\n                [\:html\\r\\n                 [\:head\\r\\n                  [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n                    (include-css \\"/vote/src/css/style.css\\")]\\r\\n                 [\:body\\r\\n                  [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n                  [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n                  [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n                  ]]))\\r\\n            \\r\\n            (defn example-handler [request]\\r\\n                  \\t(println \\">>> Processing request\\")\\r\\n            \\t(defroutes app\\r\\n              \\t\\t(GET \\"/\\" [] (core/about-page))\\r\\n              \\t\\t(route/not-found \\"Page not found.\\")\\r\\n              \\t\\t(route/resources \\"/\\"))\\r\\n                                {\:status 200\\r\\n                                 \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                                 \:body (core/about-page)\\r\\n                                 })\\r\\n            \\r\\n            (run-jetty \#'example-handler {\:port 9000 \:join? false})" "(defn about-page [] \\r\\n   (html5 [\:p \u201Cabout this stuff\u201D]))\\r\\n         \\r\\n         (defn index-page []\\r\\n                 (html5\\r\\n                   [\:html\\r\\n                    [\:head\\r\\n                     [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n                       (include-css \\"/vote/src/css/style.css\\")]\\r\\n                    [\:body\\r\\n                     [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n                     [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n                     [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n                     ]]))\\r\\n               \\r\\n               (defn example-handler [request]\\r\\n                     \\t(println \\">>> Processing request\\")\\r\\n               \\t(defroutes app\\r\\n                 \\t\\t(GET \\"/\\" [] (core/about-page))\\r\\n                 \\t\\t(route/not-found \\"Page not found.\\")\\r\\n                 \\t\\t(route/resources \\"/\\"))\\r\\n                                   {\:status 200\\r\\n                                    \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                                    \:body (core/about-page)\\r\\n                                    })\\r\\n               \\r\\n               (run-jetty \#'example-handler {\:port 1500 \:join? false})" "(defn index-page []\\r\\n        (html5\\r\\n          [\:html\\r\\n           [\:head\\r\\n            [\:title \\"Anonymous Candidate | Software Developer\\"]\\r\\n              (include-css \\"/vote/src/css/style.css\\")]\\r\\n           [\:body\\r\\n            [\:h1 \\"Web Applicationing Development Using Clojure\\"]\\r\\n            [\:h2 \\"UNDER CONSTRUCTION\\"]\\r\\n            [\:img {\:src \\"http\://c71123.com/img/jk_keller-under_construction.gif\\"}]\\r\\n            ]]))\\r\\n      \\r\\n      (defn example-handler [request]\\r\\n            \\t(println \\">>> Processing request\\")\\r\\n      \\t(defroutes app\\r\\n        \\t\\t(GET \\"/\\" [] (core/index-page))\\r\\n        \\t\\t(route/not-found \\"Page not found.\\")\\r\\n        \\t\\t(route/resources \\"/\\"))\\r\\n                          {\:status 200\\r\\n                           \:headers {\\"Content-Type\\" \\"text/html\\"}\\r\\n                           \:body (core/index-page)\\r\\n                           })\\r\\n      \\r\\n      (run-jetty \#'example-handler {\:port 2500 \:join? false})" "(defn example-handler [{\:keys [uri] \:as req}]\\n  {body str \\"URI is\: \\" uri }\\n  )\\r\\n         (run-jetty \#'example-handler {\:port 3500 \:join? false})" "(defn example-handler [{\:keys [uri] \:as req}]\\r\\n     {\:body str \\"URI is\: \\" uri }\\r\\n     )\\r\\n            (run-jetty \#'example-handler {\:port 3500 \:join? false})" "(defn example-handler [{\:keys [uri] \:as req}]\\r\\n     {\:body str \\"URI is\: \\" uri }\\r\\n     )\\r\\n            (run-jetty \#'example-handler {\:port 4500 \:join? false})" "(defn example-handler [{\:keys [uri] \:as req}]\\r\\n        {\:body str \\"URI is\: \\" uri }\\r\\n        )\\r\\n               (run-jetty \#'example-handler {\:port 5500})" "(defn example-handler [{\:keys [uri] \:as req}]\\r\\n           {\:body (str \\"URI is\: \\" uri)}\\r\\n           )\\r\\n                  (run-jetty \#'example-handler {\:port 6500})" "(defn example-handler [{\:keys [uri] \:as req}]\\r\\n        {\:body (str \\"URI is\: \\" uri)}\\r\\n        )\\r\\n               (run-jetty \#'example-handler {\:port 7500 \:join? false})" "(+ 1 1)"]
eclipse.preferences.version=1
